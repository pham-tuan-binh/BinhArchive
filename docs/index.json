[{"content":"As I learned more and more, I realized the key to learning was sharing. If I kept everything I\u0026rsquo;ve done for myself, I can\u0026rsquo;t grow as a Maker or as anything. To truly break that limit, I\u0026rsquo;m motivated to share my projects and opinions as articles so they can live on forever in an archive.\nNeoCoat (2) was made with a simple purpose: to go beyond. This means going beyond the first NeoCoat\u0026rsquo;s quality as well as going beyond myself as a Maker.\nThat\u0026rsquo;s why I\u0026rsquo;m happy to share with you what I\u0026rsquo;ve been able to do with NeoCoat (2).\n[Picture]\nThe birth of NeoCoat (2) While the original NeoCoat was built flimsily with breadboards and wires, the new NeoCoat is made with care. To make NeoCoat a whole package, I designed a PCB for the components to be mounted on.\n[Picture of PCB Board]\n The picture of the vase is a pun of my name. While my name has multiple meanings in Vietnamese (peaceful, equity, happiness), it can also be understood as \u0026ldquo;A vase\u0026rdquo;. That is neat, so I picked it to put on the PCB. Besides, the vase kinda depicts my body.\n With the PCB designed, NeoCoat (2) can be connected to an array of new components:\n An Accelerometer A Temperature Sensor Buttons Additional LEDs Battery More through direct pin wirings  [Picture of front pcb]\nIf the original NeoCoat needs constant power to run, NeoCoat (2) supports a charging module and a battery for mobile usage.\n[Picture of the back]\nAlso, you can design a case for it to add a strap or whatever you want. In my case, I add a magnet and a strap for ease of use. Now I can stick my NeoCoat on my fridge or swing it around.\n[Case Design]\nWhat does a NeoCoat (2) actually do? Well\u0026hellip; The NeoCoat is capable of only 4 things.\n1. It can show you cool art. [8-bit art functions]\nYou can draw directly on our web interface and your drawing will show up immediately.\n2. You can play Snake on it. [Snake] Games are a must when it comes to such type of displays. That\u0026rsquo;s why I included Snake in my build. It\u0026rsquo;s silly but necessary.\n3. You can play animations on it. [Animations]\nThis opens up a whole new realm of possibilities. You can use NeoCoat as a decoration or as a light brush.\n[Light Brush]\n4. Your choice of functions [Wildcards]\nFirst, NeoCoat is most importantly a firmware and I wrote it in the most modular way possible. This means you can plug in your code easily.\nSecond, NeoCoat\u0026rsquo;s PCB is filled with components that can do much more that its designated functions. For example, the accelerometer can make the NeoCoat into a flying mouse. The temperature sensor can make the NeoCoat into a thermostat.\nThat\u0026rsquo;s why NeoCoat is the perfect choice for hardware hackers. You can do whatever you want with NeoCoat; it\u0026rsquo;s your blank canvas. The best feature of NeoCoat is customization.\nI\u0026rsquo;ll be happy to hear your proposals of new functions for NeoCoat as well. Maybe we can share it here or on my Github repo for everyone to use. After all, NeoCoat is open-source.\nMake your own NeoCoat If you\u0026rsquo;re interested in NeoCoat, continue to read this article as I\u0026rsquo;ll show you how to make one.\nThe making of NeoCoat is simple. However, I can only show you how to make the barebone version. At the time of this article, I didn\u0026rsquo;t receive enough components for NeoCoat because of the China Lockdown. It sucks.\nThere are 4 steps in making a NeoCoat.\n1. Prepare the ingridients [Ingredients]\nTo start the DIY process, you have to acquire the ingredients first. There are only three ingredients in the minimum version:\n Wemos D1 Neopixel Matrix PCB  You can buy all through the links I provided. However, with the PCB, you need to order them through a vendor. In my case, I order my PCBs from Thien Lam PCB.\nThe Geber files for the PCBs are included on my repo.\n2. Soldering [Soldering picture]\nOn EasyEDA, you can find the schematics of NeoCoat and solder on the components accordingly. This is quite straightforward and you can probably find the way by just looking at the board.\n3. Install the firmware If you did the previous steps correctly, you should be able to power the board through the Wemos\u0026rsquo;s Micro USB port now.\nTo install the firmware, you will need to install PlatformIO. The tutorial can be found here.\nNext, you\u0026rsquo;ll need to install Git. The tutorial can be found here.\nAfter that, open your command line and follow the below instructions:\n# Clone my repo git clone https://github.com/pham-tuan-binh/neo-coat.git # Change your working directory cd neo-coat # This will install all the libraries needed for this project platformio lib install # This will upload the filesystem platformio run -t uploadfs # This will build your firmware platformio run -t build # This will upload your firmware platformio run -t upload # Tadah you\u0026#39;re done 4. Control the board If the firmware is installed correctly, you will find a new WIFI popping up in your phone\u0026rsquo;s setting. It should be named \u0026ldquo;NeoCoat\u0026rdquo;.\nConnect to this and you should be able to access NeoCoat\u0026rsquo;s web interface at \u0026quot;\u0026quot;\nCongratulations! You have made your first NeoCoat.\nClosing NeoCoat was my favorite side project. It doesn\u0026rsquo;t solve climate change or plastic pollution but it is fun and it can make people smile.\nFor most of my audience, building a NeoCoat and understanding the technologies behind it can be hard and may require a high level of dedication. However, as you read more and more, you acquire new knowledge and what boggles you now won\u0026rsquo;t in the future.\n Keep doing what you love and what comes will come. [Picture of me]\n ","permalink":"https://binhph.am/posts/neocoat-2/","summary":"As I learned more and more, I realized the key to learning was sharing. If I kept everything I\u0026rsquo;ve done for myself, I can\u0026rsquo;t grow as a Maker or as anything. To truly break that limit, I\u0026rsquo;m motivated to share my projects and opinions as articles so they can live on forever in an archive.\nNeoCoat (2) was made with a simple purpose: to go beyond. This means going beyond the first NeoCoat\u0026rsquo;s quality as well as going beyond myself as a Maker.","title":"NeoCoat (2): The new NeoCoat"},{"content":"Introduction This is the beginning of a series where I share my DIY projects and how to do them. Through this series, I want to motivate and inspire students to be a part of the Maker Culture. Every episode will be about one of my projects, in which you can learn more about what I do, how I do, and what you can do.\nThe project presented here is called NeoCoat. It\u0026rsquo;s a Pixel Display I made 2 years ago. NeoCoat\u0026rsquo;s Inspration At the end of 2020, after wandering online, I was struck by the beautiful work by Jeremy Williams, Game Frame.\n  Game FrameThe Game Frame was a pixel art display that you can put on your desk or hang on your wall. It gained over 150,000$ on Kickstarter with over 700 backers in 2016.   His work was a beautiful feat of engineering. It brought me memories of a time when I was playing Contra and Mario with my brother on a NES. So I was really motivated to make a display myself, not only to decorate my room but also to keep a piece a memory with me.\nI started to research more on past projects that shared the same idea. Unsurprisingly, there were multiple \u0026ldquo;8-bit display\u0026rdquo; projects. Pixel Project by AI Linke and Pixelstick were a few successful examples.\nThey were great, but they had some draw-backs:\n They were not open-source. They were expensive to make or buy. Some cost 200$ to 300$. They only showed animations and static pictures. They requires an SD Card or Wired connections to store and update animation or pixel data.  And you know, I\u0026rsquo;m some thing of a programmer myself. Therefore, I decided to make my own display from scratch with its special functions and designs. The beginning of NeoCoat The main idea of NeoCoat is a firmware that will fix its predecessors\u0026rsquo; errors and be used in a broadband of cases. As it is only a software product, its hardware of expression can be really flexible. If you want it to be a display, you can utilize a matrix of LEDs. If you want it to be a strip like Pixel Stick, you can buy a strip. In both scenarios, the software can be reused.\nThen, if you were to choose a medium in which NeoCoat shined, would you choose something general that everybody had done or something weird and silly? I would pick the latter.\nBut what is weird and silly that can make an 8-bit display stand out? An Eureka moment occured to me as I looked around my room. I stared at my school\u0026rsquo;s coat and suddenly thought: \u0026ldquo;What if I put a display on that.\u0026rdquo;\n  NeoCoat on a CoatNeoCoat is actually the concatenation of Neopixel and Coat.   The question now would be how to do such thing. There wasn\u0026rsquo;t any display on Shopee or Tiki that can fit my coat and followed my requirements.\nI turned over to my crafting table and made my own display from cardboard and a few Neopixel strips. It was bad, but it worked. You can see it working in a log video below.\n  To control the display, I used an ESP8266 NodeMCU. This is a popular powerful microcontroller that supports WIFI. I put in the front pocket of my coat and connected everything to a power bank.\nAfter that, I started building the firmware to run the LEDs. To fully explain how the firmware works, this article would be too long and boring. Avoiding that pitfall, I would only introduce the firmware\u0026rsquo;s structures and technologies. If you\u0026rsquo;re a programmer hoping to understand NeoCoat\u0026rsquo;s inner-workings, you\u0026rsquo;re welcomed at my Github Repo.   Web InterfaceThe web interface followed Neomorphism style.   The firmware uses Arduino framework and contains 4 main components:\n Drawable: A set of APIs that help you address each LED and set their color with HSV. This is made on top of FastLED library. Animation: A set of APIs that help you process MP4s and turn them into animations. Snake: Snake\u0026rsquo;s Game logic made by Emanuel Knopfel, implemented in my system by me. Web Server: The web interface and REST APIs for controlling the display.  NeoCoat\u0026rsquo;s firmware is built with Object-Oriented conventions. The naming of classes might be confusing but their functionalities are straight-foward. If you want to know more about them, open the collapse below. More on the firmware   Drawable represents the display itself. If you want to change any properties of the display, you will need to initiate a Drawable object. This objects contains the size of your display, the pins to which it is connected. Through this object, you can change the brightness and color of each pixel of your display.\n  Animation controls the animation functions of the display. By using a Drawable object and an MP4 decoder, it is able to render videos on your display, setting properties such as Frame-Per-Second.\n  Snake is the Snake\u0026rsquo;s logic. It takes inputs from the users and renders a matrix. This matrix is then rendered to your display using Drawable.\n  Web Server is the interaction and presentation layer with the users. Through the web interface, you send commands to the controllers. These commands are then done with according libraries and functions.\n  \nFurther development NeoCoat on a Coat was an amazing idea. But if I were to walk around school with a display on my back, the first time may be cool but the second would mean \u0026ldquo;I\u0026rsquo;m a nerd, please bully me\u0026rdquo;. Therefore, I wanted something small that I can put on my desk or put in my backpack.\nImmediately, I designed a simple case in Fusion360 and sent it to my favorite 3D Printing place, RoytechVN. They had it printed for me in 2 days and this was the result:   NeoCoat\u0026#39;s caseRoytechVN was the best place I\u0026rsquo;ve ever printed at. 100% recommended.  \nTo diffuse the LEDs, I designed a set of simple squares in Affinity Designer. These were laser-cut at DreamlaserVN.\nAfter this, I only had to stick a NodeMCU inside the case and wire it up. This was how everything turned out:   Finished productThe process might seem long, but I did it in a week. The coding was 4-day, the case was made in 3-day.  \nThe story of NeoCoat ended there\u0026hellip; until it was revived again for my blog.\nThe birth of NeoCoat (2)\n","permalink":"https://binhph.am/posts/neocoat-intro/","summary":"Introduction This is the beginning of a series where I share my DIY projects and how to do them. Through this series, I want to motivate and inspire students to be a part of the Maker Culture. Every episode will be about one of my projects, in which you can learn more about what I do, how I do, and what you can do.\nThe project presented here is called NeoCoat.","title":"The history of NeoCoat"}]