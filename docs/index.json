[{"content":"If you haven\u0026rsquo;t read The History of NeoCoat, you can read it here.\nAs I learned more and more, I realized the key to learning was sharing. If I kept everything I\u0026rsquo;ve done for myself, I can\u0026rsquo;t grow as a Maker or as anything. To truly break that limit, I\u0026rsquo;m motivated to share my projects and opinions as articles so they can live on forever in an archive.\nSearching for a project to start this \u0026ldquo;archive\u0026rdquo;, I stumbled upon NeoCoat and found it as the perfect candidate. It is fun and weird and\u0026hellip; weird. For the majority of my audience, it is approachable, non-academic and DIY-able.\nHowever, writing about some projects you made years ago ain\u0026rsquo;t sound like fun, it doesn\u0026rsquo;t show what I\u0026rsquo;m capable of now and how I\u0026rsquo;ve grown as a Maker. Therefore, I decided to make NeoCoat (2).\nNeoCoat (2) was made with a simple purpose: to go beyond. This means going beyond the first NeoCoat\u0026rsquo;s quality as well as going beyond myself as a Maker. Besides, I\u0026rsquo;m bored so I need something to kill time.\nLet\u0026rsquo;s build a new NeoCoat So what does it mean to go beyond the first NeoCoat\u0026rsquo;s quality? Hasn\u0026rsquo;t it been made with care and perfection from the start?\nNo product can be made from the start with perfection. Only through trials and errors did I find new improvements and features for NeoCoat to grow. In this case, NeoCoat was bugged with several pain points:\n The case was fragile, easy to break upon the slightest impact. The wirings was done hastily with little care, containing high risks of short circuit or hardware failures. Requires constant power, not portable. Limited functionalities.  To solve these issues, EasyEDA was my go-to. Using its Sketch designer, I drew the schematic of the NeoCoat with new components added.\n  Schematic of NeoCoatWith new components installed, there is no limit to what NeoCoat can do.   As you can see in the schematics, there were 5 new components:\n An accelorometer and a Gyroscope A temperature sensor Buttons Indicator Leds Charging module  These components were then located on a small PCB that was also designed on EasyEDA.\n  NeoCoat\u0026#39;s PCBThanks to the new PCB, NeoCoat is compact, durable and safe to handle.   Waiting is the key to success now as I wait for the PCB to be manufactured and delivered from China. The provider I used was Thien Lam PCB. Their PCB mask was top-notch, surpassing the quality of ThegioiIC or Hatakey. Furthermore, for orders below 500.000VND, you don\u0026rsquo;t need to pay upfront.\nAfter one month of loitering, I recieved the package and here it was.\n  NeoCoat\u0026#39;s PCBNormally, the delivery time would be 2-week. However, one week into the production process of my order, a Covid Lockdown was initiated in Shenzen, putting down factories.   For the ingridients, I order them on ThegioiIC. The BOM can be found on my EasyEDA project, along with the schematics and PCB\u0026rsquo;s designs.\nHere are some pictures of the new NeoCoat.\n  The front of NeoCoatDue to hardware shortages, some components hasn\u0026rsquo;t arrived at the time this article was published.     The back of NeoCoatThe new NeoCoat supports a Lithium-Ion battery and a charging module. At the time of writing this article, I have only received the charging module.   If you are thinking this looks awful as a finished product, I do too. That\u0026rsquo;s why I\u0026rsquo;ve created a new case to house this PCB in Fusion360. However, as I can\u0026rsquo;t find any 3D printing service in Hai Phong anymore, I have decided not to include the case in the final project. Still, here is a sneak peak into what it would look like.\n  NeoCoat\u0026#39;s caseEvery product I designed is heavily influenced by the design philosophy of Dieter Rams. Although I haven\u0026rsquo;t reach a point where such philosophy is applied perfectly, I\u0026rsquo;m trying.   Additionaly, I\u0026rsquo;ve created diffusers for the Leds in Affinity Designer as well.\n  NeoCoat\u0026#39;s diffusersThese help spread the color evenly on each LED.   SO what does a NeoCoat (2) actually do? After all this hassle, what can NeoCoat (2) actually do?\nWell\u0026hellip; There are four main functions of NeoCoat. These are pretty much the old ones, but there is a little twist to it.\n1. Draw 8-bit art Using our product, you can draw pixel art and decorate everything with your NeoCoat.\n  2. Play Snake You can also use it to play Snake when you are bored. No pixel-art display should exist without the ability to run Snake.\n  3. Create animation When it is in idle mode, you can play animation on it. Unlike other projects, the animation doesn\u0026rsquo;t need to be hard-coded or installed through an USB. You can control it directly on Neocoat\u0026rsquo;s web interface.\n  4. Wild cards Limited by only three features?\nDon\u0026rsquo;t worry. The possibilities with NeoCoat are endless.\nCustomization is a feature of our product:\n Using the onboard MPU6050, you can turn your NeoCoat into a keyboard or a mouse. The temperature sensor can make your NeoCoat into a thermostat.  What limit you are your ability to imagine\u0026hellip; and probably your programming skill.\nMake your own NeoCoat If you\u0026rsquo;re interested in NeoCoat, continue to read this article as I\u0026rsquo;ll show you how to make the barebone version of NeoCoat.   NeoCoat\u0026#39;s barebone versionThis version requires the least work and ingridients with only three main parts and four making steps.  \n1. Prepare the ingridients To start the DIY process, you have to acquire the ingredients first. There are only three ingredients in the minimum version:\n Wemos D1 Neopixel Matrix PCB  You can buy all through the links I provided. However, with the PCB, you need to order them through a vendor.\nThe Geber files for the PCBs are included on my EasyEDA project.\n2. Soldering On EasyEDA, you can find the schematics of NeoCoat and assemble the components accordingly. This is quite straightforward and you can probably find the way by just looking at the board.\n3. Install the firmware If you did the previous steps correctly, you should be able to power the board through the Wemos\u0026rsquo;s Micro USB port now.\nTo install the firmware, you will need to install PlatformIO. The tutorial can be found here.\nNext, you\u0026rsquo;ll need to install Git. The tutorial can be found here.\nAfter that, open your command line and follow the below instructions:\n# Clone my repo git clone https://github.com/pham-tuan-binh/neo-coat.git # Change your working directory cd \u0026#34;neo-coat/Neopixel controller\u0026#34; # This will install all the libraries needed for this project platformio lib install # This will upload the filesystem platformio run -t uploadfs # This will build your firmware platformio run -t build # This will upload your firmware platformio run -t upload # Tadah you\u0026#39;re done 4. Control the board If the firmware is installed correctly, you will find a new Wifi hotspot popping up in your phone\u0026rsquo;s setting. It should be named \u0026ldquo;NeoCoat\u0026rdquo;.\nConnect to this and you should be able to access NeoCoat\u0026rsquo;s web interface at \u0026ldquo;1.1.1.1\u0026rdquo;\nCongratulations! You can use your NeoCoat now.\nClosing NeoCoat was my favorite side project. It doesn\u0026rsquo;t solve climate change or plastic pollution but it is fun and it can make people smile.\nFor most of my audience, building a NeoCoat and understanding the technologies behind it can be hard and may require a high level of dedication. However, as you read more and more, you acquire new knowledge and what boggles you now won\u0026rsquo;t in the future.\nIt is unfortunate I can\u0026rsquo;t talk about all the hassle I came through in the making of NeoCoat. If you have any question, feel free to reach me.\n Keep doing what you love and what comes will come.\n ","permalink":"https://binhph.am/posts/neocoat-2/","summary":"If you haven\u0026rsquo;t read The History of NeoCoat, you can read it here.\nAs I learned more and more, I realized the key to learning was sharing. If I kept everything I\u0026rsquo;ve done for myself, I can\u0026rsquo;t grow as a Maker or as anything. To truly break that limit, I\u0026rsquo;m motivated to share my projects and opinions as articles so they can live on forever in an archive.\nSearching for a project to start this \u0026ldquo;archive\u0026rdquo;, I stumbled upon NeoCoat and found it as the perfect candidate.","title":"NeoCoat (2): The new NeoCoat"},{"content":"Introduction This is the beginning of a series where I share my DIY projects and how to do them. Through this series, I want to motivate and inspire students to be a part of the Maker Culture. Every episode will be about one of my projects, in which you can learn more about what I do, how I do, and what you can do.\nThe project presented here is called NeoCoat. It\u0026rsquo;s a Pixel Display I made 2 years ago.  \nNeoCoat\u0026rsquo;s Inspration At the end of 2020, after wandering online, I was struck by the beautiful work by Jeremy Williams, Game Frame.\n  Game FrameThe Game Frame was a pixel art display that you can put on your desk or hang on your wall. It gained over 150,000$ on Kickstarter with over 700 backers in 2016.   His work was a beautiful feat of engineering. It brought me memories of a time when I was playing Contra and Mario with my brother on a NES. So I was really motivated to make a display myself, not only to decorate my room but also to keep a piece a memory with me.\nI started to research more on past projects that shared the same idea. Unsurprisingly, there were multiple \u0026ldquo;8-bit display\u0026rdquo; projects. Pixel Project by AI Linke and Pixelstick were a few successful examples.\nThey were great, but they had some draw-backs:\n They were not open-source. They were expensive to make or buy. Some cost 200$ to 300$. They only showed animations and static pictures. They requires an SD Card or Wired connections to store and update animation or pixel data.  And you know, I\u0026rsquo;m some thing of a programmer myself. Therefore, I decided to make my own display from scratch with its special functions and designs. The beginning of NeoCoat The main idea of NeoCoat is a firmware that will fix its predecessors\u0026rsquo; errors and be used in a broadband of cases. As it is only a software product, its hardware of expression can be really flexible. If you want it to be a display, you can utilize a matrix of LEDs. If you want it to be a strip like Pixel Stick, you can buy a strip. In both scenarios, the software can be reused.\nThen, if you were to choose a medium in which NeoCoat shined, would you choose something general that everybody had done or something weird and silly? I would pick the latter.\nBut what is weird and silly that can make an 8-bit display stand out? An Eureka moment occured to me as I looked around my room. I stared at my school\u0026rsquo;s coat and suddenly thought: \u0026ldquo;What if I put a display on that.\u0026rdquo;\n  NeoCoat on a CoatNeoCoat is actually the concatenation of Neopixel and Coat.   The question now would be how to do such thing. There wasn\u0026rsquo;t any display on Shopee or Tiki that can fit my coat and followed my requirements.\nI turned over to my crafting table and made my own display from cardboard and a few Neopixel strips. It was bad, but it worked. You can see it working in a log video below.\n  To control the display, I used an ESP8266 NodeMCU. This is a popular powerful microcontroller that supports WIFI. I put in the front pocket of my coat and connected everything to a power bank.\nAfter that, I started building the firmware to run the LEDs. To fully explain how the firmware works, this article would be too long and boring. Avoiding that pitfall, I would only introduce the firmware\u0026rsquo;s structures and technologies. If you\u0026rsquo;re a programmer hoping to understand NeoCoat\u0026rsquo;s inner-workings, you\u0026rsquo;re welcomed at my Github Repo.   Web InterfaceThe web interface followed Neomorphism style.   The firmware uses Arduino framework and contains 4 main components:\n Drawable: A set of APIs that help you address each LED and set their color with HSV. This is made to work with FastLED library. Animation: A set of APIs that help you process MP4s and turn them into animations. Snake: Snake\u0026rsquo;s Game logic made by Emanuel Knopfel, implemented in my system by me. Web Server: The web interface and REST APIs for controlling the display.  NeoCoat\u0026rsquo;s firmware is built with Object-Oriented conventions. The naming of classes might be confusing but their functionalities are straight-foward. If you want to know more about them, open the collapse below. More on the firmware   Drawable represents the display itself. If you want to change any properties of the display, you will need to initiate a Drawable object. This objects contains the size of your display, the pins to which it is connected. Through this object, you can change the brightness and color of each pixel of your display.\n  Animation controls the animation functions of the display. By using a Drawable object and an MP4 decoder, it is able to render videos on your display, setting properties such as Frame-Per-Second.\n  Snake is the Snake\u0026rsquo;s logic. It takes inputs from the users and renders a matrix. This matrix is then rendered to your display using Drawable.\n  Web Server is the interaction and presentation layer with the users. Through the web interface, you send commands to the controllers. These commands are then done with according libraries and functions.\n  \nFurther development NeoCoat on a Coat was an amazing idea. But if I were to walk around school with a display on my back, the first time may be cool but the second would mean \u0026ldquo;I\u0026rsquo;m a nerd, please bully me\u0026rdquo;. Therefore, I wanted something small that I can put on my desk or put in my backpack.\nImmediately, I designed a simple case in Fusion360 and sent it to my favorite 3D Printing place, RoytechVN. They had it printed for me in 2 days and this was the result:   NeoCoat\u0026#39;s caseRoytechVN was the best place I\u0026rsquo;ve ever printed at. 100% recommended.  \nTo diffuse the LEDs, I designed a set of simple squares in Affinity Designer. These were laser-cut at DreamlaserVN.\nAfter this, I only had to stick a NodeMCU inside the case and wire it up. This was how everything turned out:   Finished productThe process might seem long, but I did it in a week. The coding was 4-day, the case was made in 3-day.  \nThe story of NeoCoat ended there\u0026hellip; until it was revived again for my blog.\nThe birth of NeoCoat (2)\n","permalink":"https://binhph.am/posts/neocoat-intro/","summary":"Introduction This is the beginning of a series where I share my DIY projects and how to do them. Through this series, I want to motivate and inspire students to be a part of the Maker Culture. Every episode will be about one of my projects, in which you can learn more about what I do, how I do, and what you can do.\nThe project presented here is called NeoCoat.","title":"The history of NeoCoat"}]